@page "/editmenu"

<PageTitle>Edit Menu</PageTitle>

@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore
@inject RestaurantMenuService MenuService
@inject IDbContextFactory<MenuDbContext> DbFactory

<h1>Edit Menu</h1>

@if (menus == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Description</th>
                <th>Price</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in menus)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Category</td>
                    <td>@item.Description</td>
                    <td>@item.Price</td>
                    <td><img style="max-width: 150px; max-height: 150px; border-radius:20px; object-fit: cover;" src=@item.Img /></td>
                </tr>
            }
        </tbody>
    </table>

}

<EditForm Model="@editModel" OnValidSubmit="@UpdateValidData">
    Select:
    <InputSelect @bind-Value="@SelectedIndex">
        @{
            int count = 0;
            @foreach (var data in menus)
            {
                <option value="@count">@data.Name</option>
                count++;
            }
        }
    </InputSelect>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <table>
        <tr>
            <td>Name: </td>
            <td><InputText id="name" @bind-Value="editModel.Name" /></td>
        </tr>
        <tr>
            <td>Category: </td>
            <td>
                <InputSelect id="category" class="form-control" @bind-Value="editModel.Category">
                    <option value="Food">Food</option>
                    <option value="Beverage">Beverage</option>
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td>Description: </td>
            <td><InputText id="description" @bind-Value="editModel.Description" /></td>
        </tr>
        <tr>
            <td>Price: </td>
            <td><InputNumber id="price" @bind-Value="editModel.Price" /></td>
        </tr>
        <tr>
            <td>Image URL: </td>
            <td><InputText id="img" @bind-Value="editModel.Img" /></td>
        </tr>
    </table>
    <button type="submit" @attributes="UpdateButtonAttrs">Update</button>
</EditForm>
<button type="button" @onclick="AddData">@AddButtonText</button>
<button type="button" @onclick="RemoveData" @attributes="RemoveButtonAttrs">Remove</button>

@code {
    private List<RestaurantMenu> menus = new();
    private RestaurantMenu editModel = new();

    private int _selectedIndex;
    private int SelectedIndex
    {
        get => _selectedIndex;
        set
        {
            _selectedIndex = value;
            editModel = menus[_selectedIndex];
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        await dbContext.Database.EnsureCreatedAsync();
        menus = dbContext.RestaurantMenus.ToList();
        if (menus.Count > 0)
        {
            SelectedIndex = 0;
        }
    }

    private bool _isNewAdd;
    private string AddButtonText = "Add";
    private bool IsNewAdd
    {
        get => _isNewAdd;
        set
        {
            _isNewAdd = value;
            AddButtonText = (!_isNewAdd) ? "Add" : "Save";
            RemoveButtonAttrs["disable"] = (!_isNewAdd) ? false : true;
        }
    }


    private async void AddData()
    {
        if (!IsNewAdd)
        {
            editModel = new();
            editModel.Category = editModel.Category == null ? "Food" : editModel.Category;
            IsNewAdd = true;
            return;
        }
        using var dbContext = await DbFactory.CreateDbContextAsync();
        var newData = dbContext.RestaurantMenus.Add(editModel);
        await dbContext.SaveChangesAsync();
        IsNewAdd = false;
        menus = dbContext.RestaurantMenus.ToList();
    }

    private Dictionary<string, object> RemoveButtonAttrs = new()
    {
        {"disable",false}
    };

    private async void RemoveData()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        var newData = dbContext.RestaurantMenus.Remove(menus[_selectedIndex]);
        await dbContext.SaveChangesAsync();
        menus = dbContext.RestaurantMenus.ToList();
    }

    private Dictionary<string, object> UpdateButtonAttrs = new()
    {
        {"disable",false}
    };

    private async void UpdateValidData()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        var selModel = menus[SelectedIndex];
        selModel.Name = editModel.Name;
        selModel.Category = editModel.Category;
        selModel.Description = editModel.Description;
        selModel.Price = editModel.Price;
        selModel.Img = editModel.Img;
        var newData = dbContext.RestaurantMenus.Update(selModel);
        await dbContext.SaveChangesAsync();
    }

}
