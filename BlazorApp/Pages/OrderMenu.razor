@page "/ordermenu"

<PageTitle>Order Menu</PageTitle>

@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<MenuDbContext> DbFactory
@inject IDbContextFactory<OrderDbContext> OrderDbFactory

<div style="display:flex; flex-direction:row; justify-content: space-between;">
    <h3>Order Menu</h3>
    <h3>Total Price:@sum</h3>
    <button @onclick="()=>SubmitOrder()">Order!</button>
</div>



@if (menus == null)
{
    <p><em>Loading...</em></p>
}
else
{   <h4>Food</h4>
    <div style="grid-template-columns: repeat(5, minmax(0, 1fr)); display: grid; justify-content:center; padding:20px; background-color:lightgray; border-radius: 20px; gap:20px; margin-bottom:30px;">
        @foreach (var item in menus.Where(data => data.Category == "Food"))
        {
            <div style="display: flex; flex-direction: column; justify-content: space-between; max-height: 300px; max-width: 200px;background-color:white; border-radius: 10px; box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); justify-self:center;">
                <img style="object-fit:cover; object-position:center; max-height: 200px; max-width: 200px; min-height: 200px; min-width: 200px; border-radius: 10px;" src=@item.Img />
                <div style="display: flex; justify-content: space-between; min-height:30px; padding-left:10px; padding-right:10px; ">
                    <div style="display: flex; flex-direction: column; margin-top:auto; margin-bottom:auto;">
                        <p style="margin-top:5px; margin-bottom:5px">@item.Name</p>
                        <p style="margin-bottom:5px">Price : @item.Price Baht</p>
                    </div>
                    <div @onclick="()=>AddToCart(item)">
                        <svg  style="margin-top:auto; margin-bottom:auto; cursor:pointer" width="30px" height="30px" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        }
    </div>
    <h4>Beverage</h4>
    <div style="grid-template-columns: repeat(5, minmax(0, 1fr)); display: grid; justify-content:center; padding:20px; background-color:lightgray; border-radius: 20px; gap:20px; margin-bottom:30px;">
        @foreach (var item in menus.Where(data => data.Category == "Beverage"))
        {
            <div style="display: flex; flex-direction: column; justify-content: space-between; max-height: 300px; max-width: 200px;background-color:white; border-radius: 10px; box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); justify-self:center;">
                <img style="object-fit:cover; object-position:center; max-height: 200px; max-width: 200px; min-height: 200px; min-width: 200px; border-radius: 10px;" src=@item.Img />
                <div style="display: flex; justify-content: space-between; min-height:30px; padding-left:10px; padding-right:10px; ">
                    <div style="display: flex; flex-direction: column; margin-top:auto; margin-bottom:auto;">
                        <p style="margin-top:5px; margin-bottom:5px">@item.Name</p>
                        <p style="margin-bottom:5px">Price : @item.Price Baht</p>
                    </div>
                    <div @onclick="()=>AddToCart(item)">
                        <svg style="margin-top:auto; margin-bottom:auto; cursor:pointer" width="30px" height="30px" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        }
    </div>
}



@code {
    private List<RestaurantMenu> menus = new();
    private List<Order> Order = new();
    private Dictionary<string,int> OrderList = new();
    private Order OrderModel = new();
    private int sum = 0;

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        await dbContext.Database.EnsureCreatedAsync();
        menus = dbContext.RestaurantMenus.ToList();
    }


    private void AddToCart(RestaurantMenu CurrentOrder)
    {
        int count = 0;
        @foreach (var item in OrderList)
        {
            count += 1;
            
            if (item.Key == CurrentOrder.Name)
            {
                OrderList[CurrentOrder.Name] += 1;
                break;
            }else if (count == OrderList.Count())
            {
                OrderList.Add(CurrentOrder.Name, 1);
            }
        }
        sum += CurrentOrder.Price;
        Console.WriteLine("Hello");
    }

    private async void SubmitOrder()
    {
        using var orderDbContext = await OrderDbFactory.CreateDbContextAsync();
        await orderDbContext.Database.EnsureCreatedAsync();
        OrderModel = new()
            {
                Date = DateTime.Now,
                Name = OrderList.Keys.ToList(),
                Amount = OrderList.Values.ToList(),
                TotalPrice = sum
            };
        orderDbContext.Orders.Add(OrderModel);
        await orderDbContext.SaveChangesAsync();
        OrderList = new();
        sum = 0;
    }
}
